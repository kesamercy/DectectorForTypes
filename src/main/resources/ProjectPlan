way forward plan:
- transfer all the variables to be declared in the dector file 
- debug the code to figure out what's cauing the bug now. 

- transfer the files with the data from the other folder to this folder for research
- 


- transfer the local variables to the dector class initalize all the variables in the new class
- debug the code -- figure out why current output is the way it is now. 
- test run on large 






- reorganised the files. going to rename them and then test... if test works, then move on to the version2 of the implementation
4b. read threads that use the worker and reader thread implementation
5.  research on different csvparser to use so that you can know the number of elements in the file so that you determine the fraction to be read by the user


things changed:
- get the threadnum to work correctly
- get the set and get methods to work correctly
- created a new class for the variables 
- get the add method for the list of datatypes to work
- change the type from which the csv values are being read. reading from tab delimited.
- make sure the first regex are reading correctly, date is now recoginised 



Notes:
it's impossible to determine the fraction of data to examine without knowing the number of records in the data.
i don't know any other way of getting the number of records in the file without loading them into memory.
for now, i thought moving on from an implementation that doesn't require the user to enter a number at
the command line might be a tentative solution.

Problem: Some of the regex match some of them don't. when they were assigned as variables they matched, now in string format, they don't match for the most part. 
for example, date. 







trick for the second batch is :

1. if goal is to get immediate response, then you might not need to use threads... you can usethe
same iterator for both threads.....


2. have one thread for reading the data and then other worker threads to process the data.
DataStrucrure  that can help with this..... check rocket chat for the link to this...

3. One of the queue impelementations for the data from the threads......
reader and worker threads is this method
isolate code needed to read and isolate the code needed to process the records.
trick is to keep them in sync, the threads would be reading in the data at the same time



hack: split the data in a different
have the 2 threads take in turns in reading the rows. one thread reads even rows, other thread reads odd rows.
each thread would have it's own iterator....

- skip lines...
