package datatypeDetectorPackage;

import java.awt.FontFormatException;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.omg.IOP.TaggedComponentHelper;

public class DetectorClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String fileName = "C:\\Users\\nm293\\git\\TypeDetector\\datatypeDetector\\datatypeDetectorPackage\\data2.csv";
		File file = new File(fileName);
		
		processFile(file);
		
	}// end main
	
	public static void processFile(File filename) {
		
		Map<String, Integer> datatypes = new HashMap<>();

		try {

			Scanner inputStream = new Scanner(filename );
			inputStream.next(); // skip the header
			String [] typereturnedStrings = {"none yet" , "none yet", "none yet"};
			while (inputStream.hasNext()) {
				String data = inputStream.next(); // returns the row or the whole line

				String[] colvalues = data.split(","); // gets the col values in each row 
				
				//System.out.println("the lenght of the colvales " + colvalues.length);
				
				String [] colsreturn = {colvalues[0], colvalues[1], colvalues[2]};
				
				
				
				for (int i = 0; i < colsreturn.length; i++) {
					
					String typefound = findType(colsreturn[i]);
					
					System.out.println(typefound);
					
					//add the part below that concldes to the part here and make it all work together 
					
					//create a hash map for each col so that you can return the many types in each col 
					
					if(datatypes.containsKey(typefound)) {
						 //increase the count for type found already
						datatypes.put(typefound, datatypes.get(typefound) + 1);
						
					}//end if 
					else {
						//add the type found to the hash map
						datatypes.put(typefound, 1);
						
					}//end else 
					
					int highesttypenum = 0;
					String dominantType = "none yet";
					
					for(String datatype : datatypes.keySet()) {
						Integer thetype = datatypes.get(datatype);
						if(thetype > highesttypenum) {
							highesttypenum = thetype;
							dominantType = datatype;
						}
					}
					System.out.println();
					System.out.printf("the dominant type is '%s', %d times", 
							dominantType, highesttypenum);
					
					System.out.println();
					
					typereturnedStrings[i] = dominantType;
	
				}//end for
				
				
			} // end while
			inputStream.close();
			

			for (int i = 0; i < typereturnedStrings.length; i++) {
				
				System.out.println("type is  " + i + typereturnedStrings[i]);
				
			}
			
			
			
			

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} // end catch
		
		
	}
	
	public static String findType(String stringtomatch) {
		 
		//declare expressions to match
		String integer = ".*[^0-9].*";
		String floatnum = "([+-]?(\\d+\\.)?\\d+)";
		String date = "(0?[1-9]|1[012])[- \\/.](0?[1-9]|[12][0-9]|3[01])[- \\/.](19|20)\\d\\d";
		String bool = "([Vv]+(erdade(iro)?)?|[Ff]+(als[eo])?|[Tt]+(rue)?|0|[\\+\\-]?1)";
		String timestamp = "([0-1][0-9]|[2][0-3]):([0-5][0-9])";
		
		boolean matched = false;
		String stringtype = "none yet";
		
		//create array for the type to be checked 
		String[] regextypes = { bool, timestamp, date, floatnum, integer};
		
		//determine the type in the string 
		for(int i = 0; i < regextypes.length; ++i) {
			
			//check if the string matches any regex
			matched = stringtomatch.matches(regextypes[i]);

			//break out of the loop if the type matches 
			if(matched == true) {

				if(regextypes[i] == date) {
					 stringtype = "date";
				}
				if(regextypes[i] == bool) {
					 stringtype = "bool";
				}
				if(regextypes[i] == integer) {
					 stringtype = "integer";
				}
				if(regextypes[i] == floatnum) {	
					 stringtype = "float";
				}
				if(regextypes[i] == timestamp) {	
					 stringtype = "time";
				}
				
				return stringtype;
			}//end if 
			
		}//end for 
		
		return stringtype;
	 
	 }//end findType 

}// end DetectorClass
